package describers

import (
	"context"
	"fmt"
	"strconv"

	"github.com/opengovern/og-describer-template/discovery/pkg/models"
	model "github.com/opengovern/og-describer-template/discovery/provider"
	"github.com/shurcooL/githubv4"
	steampipemodels "github.com/turbot/steampipe-plugin-github/github/models"
)

func GetAllRepositoriesVulnerabilities(ctx context.Context, githubClient model.GitHubClient, organizationName string, stream *models.StreamSender) ([]models.Resource, error) {
	client := githubClient.RestClient

	var repositoryName string
	if value := ctx.Value(paramKeyRepoName); value != nil {
		repositoryName = value.(string)
	}

	if repositoryName != "" {
		repoValues, err := GetRepositoryVulnerabilities(ctx, githubClient, stream, organizationName, repositoryName)
		if err != nil {
			return nil, err
		}
		return repoValues, nil
	}

	repositories, err := getRepositories(ctx, client, organizationName)
	if err != nil {
		return nil, nil
	}
	var values []models.Resource
	for _, repo := range repositories {
		repoValues, err := GetRepositoryVulnerabilities(ctx, githubClient, stream, organizationName, repo.GetName())
		if err != nil {
			return nil, err
		}
		values = append(values, repoValues...)
	}
	return values, nil
}

func GetRepositoryVulnerabilities(ctx context.Context, githubClient model.GitHubClient, stream *models.StreamSender, owner, repo string) ([]models.Resource, error) {
	client := githubClient.GraphQLClient
	states := []githubv4.RepositoryVulnerabilityAlertState{
		githubv4.RepositoryVulnerabilityAlertStateOpen,
		githubv4.RepositoryVulnerabilityAlertStateFixed,
		githubv4.RepositoryVulnerabilityAlertStateDismissed,
	}
	variables := map[string]interface{}{
		"owner":    githubv4.String(owner),
		"repo":     githubv4.String(repo),
		"pageSize": githubv4.Int(pageSize),
		"cursor":   (*githubv4.String)(nil),
		"states":   states,
	}
	var query struct {
		RateLimit  steampipemodels.RateLimit
		Repository struct {
			VulnerabilityAlerts struct {
				TotalCount int
				PageInfo   steampipemodels.PageInfo
				Nodes      []steampipemodels.RepositoryVulnerabilityAlert
			} `graphql:"vulnerabilityAlerts(first: $pageSize, after: $cursor, states: $states)"`
		} `graphql:"repository(owner: $owner, name: $repo)"`
	}
	appendRepoVulnerabilityAlertColumnIncludes(&variables, repositoryVulnerabilityAlertCols())
	repoFullName := formRepositoryFullName(owner, repo)
	var values []models.Resource
	for {
		err := client.Query(ctx, &query, variables)
		if err != nil {
			return nil, err
		}
		for _, alert := range query.Repository.VulnerabilityAlerts.Nodes {
			id := fmt.Sprintf("%s/%s/%s", owner, repo, strconv.Itoa(alert.Number))
			value := models.Resource{
				ID:   id,
				Name: strconv.Itoa(alert.Number),
				Description: model.RepoVulnerabilityAlertDescription{
					RepositoryFullName:         repoFullName,
					Number:                     alert.Number,
					NodeID:                     alert.NodeId,
					AutoDismissedAt:            alert.AutoDismissedAt,
					CreatedAt:                  alert.CreatedAt,
					DependencyScope:            alert.DependencyScope,
					DismissComment:             alert.DismissComment,
					DismissReason:              alert.DismissReason,
					DismissedAt:                alert.DismissedAt,
					Dismisser:                  alert.Dismisser,
					FixedAt:                    alert.FixedAt,
					State:                      alert.State,
					SecurityAdvisory:           alert.SecurityAdvisory,
					SecurityVulnerability:      alert.SecurityVulnerability,
					VulnerableManifestFilename: alert.VulnerableManifestFilename,
					VulnerableManifestPath:     alert.VulnerableManifestPath,
					VulnerableRequirements:     alert.VulnerableRequirements,
					Severity:                   alert.SecurityVulnerability.Severity,
					CvssScore:                  float64(alert.SecurityAdvisory.Cvss.Score),
				},
			}
			if stream != nil {
				if err := (*stream)(value); err != nil {
					return nil, err
				}
			} else {
				values = append(values, value)
			}
		}
		if !query.Repository.VulnerabilityAlerts.PageInfo.HasNextPage {
			break
		}
		variables["cursor"] = githubv4.NewString(query.Repository.VulnerabilityAlerts.PageInfo.EndCursor)
	}
	return values, nil
}
