// Code is generated by go generate. DO NOT EDIT.
package opengovernance

import (
	"context"
	kubernetes "github.com/opengovern/og-describer-kubernetes/discovery/provider"
	essdk "github.com/opengovern/og-util/pkg/opengovernance-es-sdk"
	steampipesdk "github.com/opengovern/og-util/pkg/steampipe"
	"github.com/turbot/steampipe-plugin-sdk/v5/plugin"
	"runtime"
)

type Client struct {
	essdk.Client
}

// ==========================  START: KubernetesNode =============================

type KubernetesNode struct {
	ResourceID      string                               `json:"resource_id"`
	PlatformID      string                               `json:"platform_id"`
	Description     kubernetes.KubernetesNodeDescription `json:"Description"`
	Metadata        kubernetes.Metadata                  `json:"metadata"`
	DescribedBy     string                               `json:"described_by"`
	ResourceType    string                               `json:"resource_type"`
	IntegrationType string                               `json:"integration_type"`
	IntegrationID   string                               `json:"integration_id"`
}

type KubernetesNodeHit struct {
	ID      string         `json:"_id"`
	Score   float64        `json:"_score"`
	Index   string         `json:"_index"`
	Type    string         `json:"_type"`
	Version int64          `json:"_version,omitempty"`
	Source  KubernetesNode `json:"_source"`
	Sort    []interface{}  `json:"sort"`
}

type KubernetesNodeHits struct {
	Total essdk.SearchTotal   `json:"total"`
	Hits  []KubernetesNodeHit `json:"hits"`
}

type KubernetesNodeSearchResponse struct {
	PitID string             `json:"pit_id"`
	Hits  KubernetesNodeHits `json:"hits"`
}

type KubernetesNodePaginator struct {
	paginator *essdk.BaseESPaginator
}

func (k Client) NewKubernetesNodePaginator(filters []essdk.BoolFilter, limit *int64) (KubernetesNodePaginator, error) {
	paginator, err := essdk.NewPaginator(k.ES(), "kubernetes_node", filters, limit)
	if err != nil {
		return KubernetesNodePaginator{}, err
	}

	p := KubernetesNodePaginator{
		paginator: paginator,
	}

	return p, nil
}

func (p KubernetesNodePaginator) HasNext() bool {
	return !p.paginator.Done()
}

func (p KubernetesNodePaginator) Close(ctx context.Context) error {
	return p.paginator.Deallocate(ctx)
}

func (p KubernetesNodePaginator) NextPage(ctx context.Context) ([]KubernetesNode, error) {
	var response KubernetesNodeSearchResponse
	err := p.paginator.Search(ctx, &response)
	if err != nil {
		return nil, err
	}

	var values []KubernetesNode
	for _, hit := range response.Hits.Hits {
		values = append(values, hit.Source)
	}

	hits := int64(len(response.Hits.Hits))
	if hits > 0 {
		p.paginator.UpdateState(hits, response.Hits.Hits[hits-1].Sort, response.PitID)
	} else {
		p.paginator.UpdateState(hits, nil, "")
	}

	return values, nil
}

var listKubernetesNodeFilters = map[string]string{
	"addresses":        "Status.Addresses",
	"allocatable":      "Status.Allocatable",
	"capacity":         "Status.Capacity",
	"conditions":       "Status.Conditions",
	"config":           "Status.Config",
	"config_source":    "Description.Node.Spec.ConfigSource",
	"daemon_endpoints": "Status.DaemonEndpoints",
	"images":           "Status.Images",
	"node_info":        "Status.NodeInfo",
	"phase":            "Status.Phase",
	"pod_cidr":         "Description.Node.Spec.PodCIDR",
	"pod_cidrs":        "Description.Node.Spec.PodCIDRs",
	"provider_id":      "Description.Node.Spec.ProviderID",
	"taints":           "Description.Node.Spec.Taints",
	"title":            "Name",
	"unschedulable":    "Description.Node.Spec.Unschedulable",
	"volumes_attached": "Status.VolumesAttached",
	"volumes_in_use":   "Status.VolumesInUse",
}

func ListKubernetesNode(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("ListKubernetesNode")
	runtime.GC()

	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		plugin.Logger(ctx).Error("ListKubernetesNode NewClientCached", "error", err)
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		plugin.Logger(ctx).Error("ListKubernetesNode NewSelfClientCached", "error", err)
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		plugin.Logger(ctx).Error("ListKubernetesNode GetConfigTableValueOrNil for OpenGovernanceConfigKeyIntegrationID", "error", err)
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		plugin.Logger(ctx).Error("ListKubernetesNode GetConfigTableValueOrNil for OpenGovernanceConfigKeyResourceCollectionFilters", "error", err)
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		plugin.Logger(ctx).Error("ListKubernetesNode GetConfigTableValueOrNil for OpenGovernanceConfigKeyClientType", "error", err)
		return nil, err
	}

	paginator, err := k.NewKubernetesNodePaginator(essdk.BuildFilter(ctx, d.QueryContext, listKubernetesNodeFilters, integrationId, encodedResourceCollectionFilters, clientType), d.QueryContext.Limit)
	if err != nil {
		plugin.Logger(ctx).Error("ListKubernetesNode NewKubernetesNodePaginator", "error", err)
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			plugin.Logger(ctx).Error("ListKubernetesNode paginator.NextPage", "error", err)
			return nil, err
		}

		for _, v := range page {
			d.StreamListItem(ctx, v)
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

var getKubernetesNodeFilters = map[string]string{
	"addresses":        "Status.Addresses",
	"allocatable":      "Status.Allocatable",
	"capacity":         "Status.Capacity",
	"conditions":       "Status.Conditions",
	"config":           "Status.Config",
	"config_source":    "Description.Node.Spec.ConfigSource",
	"daemon_endpoints": "Status.DaemonEndpoints",
	"images":           "Status.Images",
	"node_info":        "Status.NodeInfo",
	"phase":            "Status.Phase",
	"pod_cidr":         "Description.Node.Spec.PodCIDR",
	"pod_cidrs":        "Description.Node.Spec.PodCIDRs",
	"provider_id":      "Description.Node.Spec.ProviderID",
	"taints":           "Description.Node.Spec.Taints",
	"title":            "Name",
	"unschedulable":    "Description.Node.Spec.Unschedulable",
	"volumes_attached": "Status.VolumesAttached",
	"volumes_in_use":   "Status.VolumesInUse",
}

func GetKubernetesNode(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("GetKubernetesNode")
	runtime.GC()
	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		return nil, err
	}

	limit := int64(1)
	paginator, err := k.NewKubernetesNodePaginator(essdk.BuildFilter(ctx, d.QueryContext, getKubernetesNodeFilters, integrationId, encodedResourceCollectionFilters, clientType), &limit)
	if err != nil {
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			return nil, err
		}

		for _, v := range page {
			return v, nil
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

// ==========================  END: KubernetesNode =============================
